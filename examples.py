#!/usr/bin/env python3
"""
V√≠ d·ª• c·ª• th·ªÉ s·ª≠ d·ª•ng Captcha Solver API
"""

import requests
import base64
import json
import os

def example_basic_usage():
    """
    V√≠ d·ª• c∆° b·∫£n s·ª≠ d·ª•ng API
    """
    print("üîç V√ç D·ª§ C∆† B·∫¢N - GI·∫¢I CAPTCHA")
    print("=" * 50)
    
    # URL API (thay ƒë·ªïi th√†nh URL th·ª±c t·∫ø sau khi deploy)
    api_url = "https://your-service-name-xxxxx-as.a.run.app"  # Cloud Run
    # api_url = "https://your-project-id.appspot.com"          # App Engine
    # api_url = "http://localhost:8080"                        # Local testing
    
    # ƒê·ªçc file ·∫£nh v√† convert sang base64
    image_path = "captcha_example.png"  # Thay b·∫±ng path ·∫£nh th·ª±c t·∫ø
    
    if not os.path.exists(image_path):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file {image_path}")
        print("Vui l√≤ng cung c·∫•p file ·∫£nh captcha ƒë·ªÉ test")
        return
    
    # Convert image to base64
    with open(image_path, 'rb') as f:
        image_data = f.read()
        base64_image = base64.b64encode(image_data).decode('utf-8')
    
    print(f"üì∑ ƒê·ªçc ·∫£nh: {image_path}")
    print(f"üì¶ K√≠ch th∆∞·ªõc base64: {len(base64_image)} k√Ω t·ª±")
    
    # G·ª≠i request t·ªõi API
    try:
        response = requests.post(
            f"{api_url}/solve-captcha",
            json={"image": base64_image},
            headers={"Content-Type": "application/json"},
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            if result['success']:
                coords = result['coordinates']
                print(f"‚úÖ TH√ÄNH C√îNG!")
                print(f"üìç T·ªça ƒë·ªô t√¨m th·∫•y: ({coords['x']}, {coords['y']})")
                print(f"üìç T·ªça ƒë·ªô g·ªëc: ({coords['raw_x']}, {coords['raw_y']})")
                print(f"üí¨ Message: {result['message']}")
            else:
                print(f"‚ùå TH·∫§T B·∫†I: {result['error']}")
        else:
            print(f"‚ùå HTTP Error {response.status_code}: {response.text}")
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Request Error: {e}")

def example_batch_processing():
    """
    V√≠ d·ª• x·ª≠ l√Ω batch (nhi·ªÅu ·∫£nh c√πng l√∫c)
    """
    print("\nüîç V√ç D·ª§ BATCH PROCESSING")
    print("=" * 50)
    
    api_url = "https://your-service-name-xxxxx-as.a.run.app"
    
    # List c√°c file ·∫£nh c·∫ßn x·ª≠ l√Ω
    image_files = [
        "captcha1.png",
        "captcha2.png", 
        "captcha3.png"
    ]
    
    # Filter files that exist
    existing_files = [f for f in image_files if os.path.exists(f)]
    
    if not existing_files:
        print("‚ùå Kh√¥ng t√¨m th·∫•y file ·∫£nh n√†o ƒë·ªÉ test batch")
        return
    
    print(f"üì∑ T√¨m th·∫•y {len(existing_files)} file ·∫£nh")
    
    # Convert t·∫•t c·∫£ ·∫£nh sang base64
    base64_images = []
    for image_path in existing_files:
        with open(image_path, 'rb') as f:
            image_data = f.read()
            base64_image = base64.b64encode(image_data).decode('utf-8')
            base64_images.append(base64_image)
    
    # G·ª≠i batch request
    try:
        response = requests.post(
            f"{api_url}/solve-captcha-batch",
            json={"images": base64_images},
            headers={"Content-Type": "application/json"},
            timeout=60
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Batch completed!")
            print(f"üìä T·ªïng: {result['total']}")
            print(f"‚úÖ Th√†nh c√¥ng: {result['success_count']}")
            print(f"‚ùå Th·∫•t b·∫°i: {result['failed_count']}")
            
            # Chi ti·∫øt t·ª´ng k·∫øt qu·∫£
            for i, res in enumerate(result['results']):
                filename = existing_files[res['index']]
                if res['success']:
                    coords = res['coordinates']
                    print(f"  {i+1}. {filename}: ({coords['x']}, {coords['y']}) ‚úÖ")
                else:
                    print(f"  {i+1}. {filename}: {res['error']} ‚ùå")
        else:
            print(f"‚ùå HTTP Error {response.status_code}: {response.text}")
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Request Error: {e}")

def example_web_integration():
    """
    V√≠ d·ª• t√≠ch h·ª£p v√†o web application
    """
    print("\nüîç V√ç D·ª§ T√çCH H·ª¢P WEB")
    print("=" * 50)
    
    # V√≠ d·ª• HTML form
    html_example = '''
    <!-- HTML Form -->
    <form id="captcha-form" enctype="multipart/form-data">
        <input type="file" id="captcha-image" accept="image/*" required>
        <button type="submit">Gi·∫£i Captcha</button>
    </form>
    
    <div id="result"></div>
    '''
    
    # V√≠ d·ª• JavaScript
    js_example = '''
    // JavaScript
    document.getElementById('captcha-form').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const fileInput = document.getElementById('captcha-image');
        const file = fileInput.files[0];
        
        if (!file) {
            alert('Vui l√≤ng ch·ªçn file ·∫£nh');
            return;
        }
        
        // Convert file to base64
        const reader = new FileReader();
        reader.onload = async (event) => {
            const base64 = event.target.result.split(',')[1]; // Remove data URL prefix
            
            try {
                const response = await fetch('https://your-api-url/solve-captcha', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        image: base64
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    document.getElementById('result').innerHTML = 
                        `‚úÖ T·ªça ƒë·ªô: (${result.coordinates.x}, ${result.coordinates.y})`;
                } else {
                    document.getElementById('result').innerHTML = 
                        `‚ùå L·ªói: ${result.error}`;
                }
            } catch (error) {
                document.getElementById('result').innerHTML = 
                    `‚ùå Network Error: ${error.message}`;
            }
        };
        
        reader.readAsDataURL(file);
    });
    '''
    
    print("HTML:")
    print(html_example)
    print("\nJavaScript:")
    print(js_example)

def example_mobile_integration():
    """
    V√≠ d·ª• t√≠ch h·ª£p mobile (React Native)
    """
    print("\nüîç V√ç D·ª§ T√çCH H·ª¢P MOBILE")
    print("=" * 50)
    
    react_native_example = '''
    // React Native Example
    import React, { useState } from 'react';
    import { View, Button, Alert, Image } from 'react-native';
    import ImagePicker from 'react-native-image-picker';
    
    const CaptchaSolver = () => {
        const [result, setResult] = useState(null);
        
        const pickImage = () => {
            ImagePicker.showImagePicker({}, (response) => {
                if (response.data) {
                    solveCaptcha(response.data);
                }
            });
        };
        
        const solveCaptcha = async (base64Image) => {
            try {
                const response = await fetch('https://your-api-url/solve-captcha', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        image: base64Image
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    setResult(`T·ªça ƒë·ªô: (${result.coordinates.x}, ${result.coordinates.y})`);
                    Alert.alert('Th√†nh c√¥ng', `T·ªça ƒë·ªô: (${result.coordinates.x}, ${result.coordinates.y})`);
                } else {
                    Alert.alert('L·ªói', result.error);
                }
            } catch (error) {
                Alert.alert('Network Error', error.message);
            }
        };
        
        return (
            <View>
                <Button title="Ch·ªçn ·∫£nh Captcha" onPress={pickImage} />
                {result && <Text>{result}</Text>}
            </View>
        );
    };
    '''
    
    print("React Native:")
    print(react_native_example)

def example_python_integration():
    """
    V√≠ d·ª• t√≠ch h·ª£p v√†o Python application
    """
    print("\nüîç V√ç D·ª§ T√çCH H·ª¢P PYTHON")
    print("=" * 50)
    
    python_example = '''
    # Python Application Integration
    import requests
    import base64
    from typing import Optional, Tuple
    
    class CaptchaSolver:
        def __init__(self, api_url: str, api_key: Optional[str] = None):
            self.api_url = api_url.rstrip('/')
            self.api_key = api_key
            
        def solve_from_file(self, image_path: str) -> Optional[Tuple[int, int]]:
            """Gi·∫£i captcha t·ª´ file ·∫£nh"""
            try:
                with open(image_path, 'rb') as f:
                    image_data = f.read()
                    base64_image = base64.b64encode(image_data).decode('utf-8')
                
                return self.solve_from_base64(base64_image)
            except Exception as e:
                print(f"Error reading file: {e}")
                return None
        
        def solve_from_base64(self, base64_image: str) -> Optional[Tuple[int, int]]:
            """Gi·∫£i captcha t·ª´ base64"""
            try:
                headers = {"Content-Type": "application/json"}
                if self.api_key:
                    headers["X-API-Key"] = self.api_key
                
                response = requests.post(
                    f"{self.api_url}/solve-captcha",
                    json={"image": base64_image},
                    headers=headers,
                    timeout=30
                )
                
                if response.status_code == 200:
                    result = response.json()
                    if result['success']:
                        coords = result['coordinates']
                        return (coords['x'], coords['y'])
                
                return None
            except Exception as e:
                print(f"API Error: {e}")
                return None
    
    # Usage
    solver = CaptchaSolver("https://your-api-url")
    coordinates = solver.solve_from_file("captcha.png")
    
    if coordinates:
        x, y = coordinates
        print(f"Captcha solved: ({x}, {y})")
        # Use coordinates for automation...
    else:
        print("Failed to solve captcha")
    '''
    
    print("Python Class:")
    print(python_example)

def main():
    """
    Ch·∫°y t·∫•t c·∫£ v√≠ d·ª•
    """
    print("üöÄ CAPTCHA SOLVER API - V√ç D·ª§ S·ª¨ D·ª§NG")
    print("=" * 60)
    
    # Ch·∫°y c√°c v√≠ d·ª•
    example_basic_usage()
    example_batch_processing()
    example_web_integration()
    example_mobile_integration()
    example_python_integration()
    
    print("\nüéâ HO√ÄN TH√ÄNH T·∫§T C·∫¢ V√ç D·ª§!")
    print("=" * 60)
    print("\nüìù L∆ØU √ù:")
    print("- Thay th·∫ø 'https://your-api-url' b·∫±ng URL th·ª±c t·∫ø c·ªßa service")
    print("- Chu·∫©n b·ªã file ·∫£nh captcha ƒë·ªÉ test")
    print("- Ki·ªÉm tra network connection")
    print("- Monitor usage ƒë·ªÉ tr√°nh v∆∞·ª£t quota")

if __name__ == "__main__":
    main()
