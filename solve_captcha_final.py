#!/usr/bin/env python3
"""
GI·∫¢I CAPTCHA PUZZLE - PHI√äN B·∫¢N T·ªêI ∆ØU
Nh·∫≠n di·ªán h√¨nh ·∫£nh ƒë·ªÉ t√¨m v·ªã tr√≠ gh√©p m·∫£nh ch√≠nh x√°c
"""

import cv2
import numpy as np
from datetime import datetime
import os

def solve_captcha_puzzle(image_path):
    """Gi·∫£i captcha puzzle th√¥ng minh"""
    print("üéØ B·∫ÆT ƒê·∫¶U GI·∫¢I CAPTCHA PUZZLE...")
    
    # ƒê·ªçc ·∫£nh
    img = cv2.imread(image_path)
    if img is None:
        raise ValueError(f"Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh: {image_path}")
    
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    h, w = gray.shape
    print(f"üìê K√≠ch th∆∞·ªõc ·∫£nh: {w}x{h}")
    
    # Ph√¢n t√≠ch ·∫£nh tr∆∞·ªõc
    analyze_image_structure(gray)
    
    # B∆∞·ªõc 1: T√¨m m·∫£nh gh√©p (th·ª≠ nhi·ªÅu c√°ch)
    piece_info = find_puzzle_piece_smart(img, gray)
    if piece_info is None:
        print("‚ùå Kh√¥ng t√¨m th·∫•y m·∫£nh gh√©p!")
        return None
    
    piece_template, piece_bbox = piece_info
    print(f"üß© ƒê√£ t√¨m th·∫•y m·∫£nh gh√©p: {piece_bbox}")
    
    # B∆∞·ªõc 2: T√¨m v·ªã tr√≠ kh·ªõp
    gap_position = find_best_match_position(gray, piece_template, piece_bbox)
    
    if gap_position is None:
        print("‚ùå Kh√¥ng t√¨m th·∫•y v·ªã tr√≠ kh·ªõp!")
        return None
    
    # B∆∞·ªõc 3: Visualize v√† l∆∞u k·∫øt qu·∫£
    save_result_image(img, piece_bbox, gap_position)
    
    print(f"‚úÖ TH√ÄNH C√îNG! V·ªã tr√≠ c·∫ßn click: {gap_position}")
    return gap_position

def analyze_image_structure(gray):
    """Ph√¢n t√≠ch c·∫•u tr√∫c ·∫£nh"""
    h, w = gray.shape
    
    # Ph√¢n t√≠ch c√°c v√πng
    regions = {
        'To√†n b·ªô': gray,
        'V√πng tr√™n (70%)': gray[:int(h*0.7), :],
        'V√πng d∆∞·ªõi (70%+)': gray[int(h*0.7):, :],
        'V√πng d∆∞·ªõi (80%+)': gray[int(h*0.8):, :],
        'V√πng d∆∞·ªõi (85%+)': gray[int(h*0.85):, :],
    }
    
    print("\nüìä PH√ÇN T√çCH C·∫§U TR√öC:")
    for name, region in regions.items():
        if region.size > 0:
            print(f"{name}: {region.shape}, Mean={np.mean(region):.1f}, Std={np.std(region):.1f}")

def find_puzzle_piece_smart(img, gray):
    """T√¨m m·∫£nh gh√©p b·∫±ng nhi·ªÅu ph∆∞∆°ng ph√°p th√¥ng minh"""
    h, w = gray.shape
    
    print("\nüîç T√åM M·∫¢NH GH√âP...")
    
    # Th·ª≠ nhi·ªÅu v√πng t√¨m ki·∫øm
    search_regions = [
        (0.75, "25% d∆∞·ªõi"),
        (0.8, "20% d∆∞·ªõi"), 
        (0.85, "15% d∆∞·ªõi"),
        (0.7, "30% d∆∞·ªõi"),
        (0.65, "35% d∆∞·ªõi")
    ]
    
    best_piece = None
    best_score = 0
    
    for start_ratio, region_name in search_regions:
        start_y = int(h * start_ratio)
        region = gray[start_y:, :]
        
        print(f"\nüîç T√¨m trong {region_name}...")
        
        # Th·ª≠ nhi·ªÅu ph∆∞∆°ng ph√°p threshold
        methods = [
            ('THRESH_BINARY', cv2.THRESH_BINARY),
            ('THRESH_BINARY_INV', cv2.THRESH_BINARY_INV),
            ('THRESH_OTSU', cv2.THRESH_BINARY + cv2.THRESH_OTSU),
        ]
        
        for method_name, thresh_type in methods:
            # Th·ª≠ v·ªõi nhi·ªÅu gi√° tr·ªã threshold
            thresh_values = [0] if 'OTSU' in method_name else [50, 80, 100, 120, 150, 180, 200]
            
            for thresh_val in thresh_values:
                try:
                    if 'OTSU' in method_name:
                        _, binary = cv2.threshold(region, 0, 255, thresh_type)
                    else:
                        _, binary = cv2.threshold(region, thresh_val, 255, thresh_type)
                    
                    # Morphology ƒë·ªÉ l√†m s·∫°ch
                    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))
                    binary = cv2.morphologyEx(binary, cv2.MORPH_CLOSE, kernel)
                    binary = cv2.morphologyEx(binary, cv2.MORPH_OPEN, kernel)
                    
                    # T√¨m contours
                    contours, _ = cv2.findContours(binary, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
                    
                    for contour in contours:
                        area = cv2.contourArea(contour)
                        
                        # M·∫£nh gh√©p ph·∫£i c√≥ k√≠ch th∆∞·ªõc h·ª£p l√Ω
                        if 200 < area < 8000:
                            x, y, cw, ch = cv2.boundingRect(contour)
                            
                            # Ki·ªÉm tra t·ª∑ l·ªá khung h√¨nh h·ª£p l√Ω
                            aspect_ratio = cw / ch if ch > 0 else 0
                            if 0.3 < aspect_ratio < 3.0:
                                
                                # ƒêi·ªÅu ch·ªânh t·ªça ƒë·ªô v·ªÅ ·∫£nh g·ªëc
                                abs_y = start_y + y
                                abs_bbox = (x, abs_y, cw, ch)
                                
                                # Extract template
                                template = gray[abs_y:abs_y+ch, x:x+cw]
                                
                                # ƒê√°nh gi√° ch·∫•t l∆∞·ª£ng m·∫£nh gh√©p
                                score = evaluate_piece_quality(template, area, aspect_ratio)
                                
                                if score > best_score:
                                    best_score = score
                                    best_piece = (template, abs_bbox)
                                    print(f"‚ú® M·∫£nh gh√©p t·ªët h∆°n: {method_name}, thresh={thresh_val}, area={area:.0f}, ratio={aspect_ratio:.2f}, score={score:.2f}")
                
                except Exception as e:
                    continue
    
    if best_piece:
        template, bbox = best_piece
        print(f"üèÜ Ch·ªçn m·∫£nh gh√©p t·ªët nh·∫•t: {bbox}, score={best_score:.2f}")
        return best_piece
    
    return None

def evaluate_piece_quality(template, area, aspect_ratio):
    """ƒê√°nh gi√° ch·∫•t l∆∞·ª£ng m·∫£nh gh√©p"""
    if template.size == 0:
        return 0
    
    # Ti√™u ch√≠ ƒë√°nh gi√°:
    # 1. K√≠ch th∆∞·ªõc h·ª£p l√Ω (∆∞u ti√™n medium size)
    size_score = 1.0 - abs(area - 2000) / 5000  # T·ªëi ∆∞u quanh 2000 pixels
    size_score = max(0, min(1, size_score))
    
    # 2. T·ª∑ l·ªá khung h√¨nh (∆∞u ti√™n h√¨nh vu√¥ng ho·∫∑c h√¨nh ch·ªØ nh·∫≠t c√¢n ƒë·ªëi)
    aspect_score = 1.0 - abs(aspect_ratio - 1.0) / 2.0  # T·ªëi ∆∞u quanh 1.0
    aspect_score = max(0, min(1, aspect_score))
    
    # 3. ƒê·ªô ph·ª©c t·∫°p (c√≥ chi ti·∫øt, kh√¥ng ƒë·ªìng nh·∫•t)
    std_dev = np.std(template)
    complexity_score = min(1.0, std_dev / 50.0)  # Chu·∫©n h√≥a v·ªÅ [0,1]
    
    # 4. ƒê·ªô t∆∞∆°ng ph·∫£n
    contrast = np.max(template) - np.min(template)
    contrast_score = min(1.0, contrast / 255.0)
    
    # T·ªïng h·ª£p ƒëi·ªÉm
    total_score = (size_score * 0.3 + aspect_score * 0.2 + 
                   complexity_score * 0.3 + contrast_score * 0.2)
    
    return total_score

def find_best_match_position(gray, piece_template, piece_bbox):
    """T√¨m v·ªã tr√≠ kh·ªõp t·ªët nh·∫•t"""
    h, w = gray.shape
    px, py, pw, ph = piece_bbox
    
    print(f"\nüéØ T√åM V·ªä TR√ç KH·ªöP cho m·∫£nh {pw}x{ph}...")
    
    # V√πng t√¨m ki·∫øm: ph·∫ßn tr√™n, tr√°nh v√πng m·∫£nh gh√©p
    search_end_y = max(10, py - 20)  # Tr√°nh overlap
    search_region = gray[:search_end_y, :]
    
    if search_region.size == 0:
        print("‚ùå V√πng t√¨m ki·∫øm qu√° nh·ªè!")
        return None
    
    print(f"üîç V√πng t√¨m ki·∫øm: {search_region.shape}")
    
    # Template matching v·ªõi nhi·ªÅu ph∆∞∆°ng ph√°p
    methods = [
        ('TM_CCOEFF_NORMED', cv2.TM_CCOEFF_NORMED, False),
        ('TM_CCORR_NORMED', cv2.TM_CCORR_NORMED, False),
        ('TM_SQDIFF_NORMED', cv2.TM_SQDIFF_NORMED, True),  # True = take minimum
    ]
    
    best_position = None
    best_confidence = 0
    
    # Th·ª≠ v·ªõi template g·ªëc v√† c√°c bi·∫øn th·ªÉ
    templates_to_try = [
        ("Original", piece_template),
        ("Inverted", 255 - piece_template),
    ]
    
    for template_name, template in templates_to_try:
        # ƒê·∫£m b·∫£o template kh√¥ng l·ªõn h∆°n search region
        if template.shape[0] >= search_region.shape[0] or template.shape[1] >= search_region.shape[1]:
            continue
            
        print(f"\nüîç Th·ª≠ template: {template_name}")
        
        for method_name, method, take_min in methods:
            try:
                result = cv2.matchTemplate(search_region, template, method)
                
                if take_min:
                    min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)
                    confidence = 1 - min_val  # ƒê·∫£o ng∆∞·ª£c cho SQDIFF
                    match_loc = min_loc
                else:
                    min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)
                    confidence = max_val
                    match_loc = max_loc
                
                # T√≠nh v·ªã tr√≠ center c·ªßa match
                center_x = match_loc[0] + template.shape[1] // 2
                center_y = match_loc[1] + template.shape[0] // 2
                
                print(f"  {method_name}: confidence={confidence:.3f} at ({center_x}, {center_y})")
                
                # X√°c th·ª±c th√™m n·∫øu confidence cao
                if confidence > 0.3:
                    # Ki·ªÉm tra v√πng xung quanh c√≥ ph√π h·ª£p kh√¥ng
                    validation_score = validate_gap_region(search_region, match_loc, template.shape)
                    total_score = confidence * 0.7 + validation_score * 0.3
                    
                    if total_score > best_confidence:
                        best_confidence = total_score
                        best_position = (center_x, center_y)
                        print(f"    üéØ V·ªã tr√≠ t·ªët h∆°n! Score: {total_score:.3f}")
            
            except Exception as e:
                print(f"    ‚ùå L·ªói {method_name}: {e}")
                continue
    
    if best_position:
        print(f"\nüèÜ V·ªä TR√ç T·ªêT NH·∫§T: {best_position} (confidence: {best_confidence:.3f})")
        return best_position
    
    return None

def validate_gap_region(search_region, match_loc, template_shape):
    """X√°c th·ª±c v√πng gap c√≥ ph√π h·ª£p kh√¥ng"""
    try:
        mx, my = match_loc
        th, tw = template_shape
        
        # ƒê·∫£m b·∫£o kh√¥ng v∆∞·ª£t bi√™n
        if mx + tw > search_region.shape[1] or my + th > search_region.shape[0]:
            return 0
        
        gap_region = search_region[my:my+th, mx:mx+tw]
        
        if gap_region.size == 0:
            return 0
        
        # ƒê√°nh gi√° ƒë·∫∑c tr∆∞ng gap:
        # 1. ƒê·ªô ƒë·ªìng ƒë·ªÅu (gap th∆∞·ªùng c√≥ m√†u ƒë·ªìng ƒë·ªÅu)
        uniformity = 1.0 / (1.0 + np.std(gap_region) / 50.0)
        
        # 2. ƒê·ªô t·ªëi (gap th∆∞·ªùng t·ªëi h∆°n background)
        darkness = 1.0 - np.mean(gap_region) / 255.0
        
        # 3. ƒê·ªô t∆∞∆°ng ph·∫£n th·∫•p (gap th∆∞·ªùng √≠t chi ti·∫øt)
        contrast = (np.max(gap_region) - np.min(gap_region)) / 255.0
        low_contrast = 1.0 - contrast
        
        # T·ªïng h·ª£p
        score = (uniformity * 0.4 + darkness * 0.4 + low_contrast * 0.2)
        return max(0, min(1, score))
    
    except:
        return 0

def save_result_image(img, piece_bbox, gap_position):
    """L∆∞u ·∫£nh k·∫øt qu·∫£"""
    result_img = img.copy()
    px, py, pw, ph = piece_bbox
    gx, gy = gap_position
    
    # V·∫Ω m·∫£nh gh√©p
    cv2.rectangle(result_img, (px, py), (px + pw, py + ph), (0, 0, 255), 2)
    cv2.putText(result_img, 'PIECE', (px, py - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 1)
    
    # V·∫Ω v·ªã tr√≠ gap
    cv2.circle(result_img, gap_position, 8, (0, 255, 0), -1)
    cv2.circle(result_img, gap_position, 12, (0, 255, 0), 2)
    cv2.putText(result_img, f'GAP', (gx + 15, gy - 15), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 1)
    
    # V·∫Ω ƒë∆∞·ªùng n·ªëi
    piece_center = (px + pw//2, py + ph//2)
    cv2.arrowedLine(result_img, piece_center, gap_position, (255, 255, 0), 2)
    
    # L∆∞u file
    if not os.path.exists('results'):
        os.makedirs('results')
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    result_path = f"results/captcha_solved_{timestamp}.png"
    cv2.imwrite(result_path, result_img)
    
    print(f"üíæ ƒê√£ l∆∞u k·∫øt qu·∫£: {result_path}")

def main():
    """H√†m main"""
    image_path = "image.png"
    
    try:
        gap_position = solve_captcha_puzzle(image_path)
        if gap_position:
            print(f"\nüéâ HO√ÄN TH√ÄNH!")
            print(f"üìç V·ªã tr√≠ c·∫ßn click: {gap_position}")
            print(f"üí° T·ªça ƒë·ªô X: {gap_position[0]}, Y: {gap_position[1]}")
        else:
            print("\n‚ùå TH·∫§T B·∫†I - Kh√¥ng t√¨m th·∫•y v·ªã tr√≠ ph√π h·ª£p")
    
    except Exception as e:
        print(f"‚ùå L·ªñI: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
