from PIL import Image, ImageDraw, ImageFont
import numpy as np
from skimage import feature, filters, morphology, measure
import cv2
from scipy import ndimage
import os
from datetime import datetime

def find_real_gap_position(main_image_path):
    """
    T√¨m v·ªã tr√≠ gap th·ª±c t·∫ø trong ·∫£nh - kh√¥ng d√πng target c·ªë ƒë·ªãnh
    """
    print("=== T√åM V·ªä TR√ç GAP TH·ª∞C T·∫æ ===")
    
    img = Image.open(main_image_path).convert('RGB')
    img_array = np.array(img)
    gray = np.dot(img_array[...,:3], [0.2989, 0.5870, 0.1140])
    
    h, w = gray.shape
    print(f"üìè Image size: {w}x{h}")
    
    # T√¨m t·∫•t c·∫£ √¥ vu√¥ng gap trong to√†n b·ªô ·∫£nh
    all_gaps = []
    
    # Qu√©t to√†n b·ªô ·∫£nh ƒë·ªÉ t√¨m c√°c v√πng c√≥ th·ªÉ l√† gap
    window_sizes = [16, 20, 24, 28, 32]
    
    print("üîç Scanning to√†n b·ªô ·∫£nh ƒë·ªÉ t√¨m gap...")
    
    # L·∫•y th·ªëng k√™ background
    bg_samples = []
    for i in range(0, w-50, 50):
        for j in range(0, h-50, 50):
            sample = gray[j:j+20, i:i+20]
            if sample.size > 0:
                bg_samples.append(np.mean(sample))
    
    bg_mean = np.mean(bg_samples) if bg_samples else 128
    print(f"üìä Background mean: {bg_mean:.1f}")
    
    # Qu√©t t·ª´ng v·ªã tr√≠ trong ·∫£nh (t·ªëi ∆∞u h√≥a)
    for window_size in window_sizes:
        half_size = window_size // 2
        
        for y in range(half_size, h - half_size, 8):  # Step = 8px ƒë·ªÉ tƒÉng t·ªëc
            for x in range(half_size, w - half_size, 8):
                
                # Extract window
                window = gray[y - half_size:y + half_size,
                             x - half_size:x + half_size]
                
                if window.shape[0] != window_size or window.shape[1] != window_size:
                    continue
                
                # Ph√¢n t√≠ch xem c√≥ ph·∫£i gap kh√¥ng
                gap_score = analyze_potential_gap(window, x, y, bg_mean, window_size)
                
                if gap_score > 70:  # Threshold ƒë·ªÉ x√°c ƒë·ªãnh gap
                    all_gaps.append({
                        'x': x,
                        'y': y,
                        'score': gap_score,
                        'window_size': window_size,
                        'area': window_size * window_size
                    })
    
    print(f"‚úÖ Found {len(all_gaps)} potential gaps")
    
    if not all_gaps:
        print("‚ùå Kh√¥ng t√¨m th·∫•y gap n√†o")
        return []
    
    # S·∫Øp x·∫øp theo score
    all_gaps.sort(key=lambda x: x['score'], reverse=True)
    
    # Lo·∫°i b·ªè duplicates (gaps g·∫ßn nhau)
    unique_gaps = []
    for gap in all_gaps:
        is_duplicate = False
        for existing in unique_gaps:
            distance = np.sqrt((gap['x'] - existing['x'])**2 + (gap['y'] - existing['y'])**2)
            if distance < 20:  # N·∫øu g·∫ßn nhau < 20px th√¨ coi l√† duplicate
                is_duplicate = True
                break
        
        if not is_duplicate:
            unique_gaps.append(gap)
    
    print(f"üéØ Found {len(unique_gaps)} unique gaps:")
    for i, gap in enumerate(unique_gaps[:10]):
        print(f"  {i+1}. ({gap['x']}, {gap['y']}) - Score: {gap['score']:.1f} - Size: {gap['window_size']}")
    
    return unique_gaps

def analyze_potential_gap(window, x, y, bg_mean, window_size):
    """
    Ph√¢n t√≠ch xem window c√≥ ph·∫£i l√† gap th·ª±c t·∫ø kh√¥ng
    """
    window_mean = np.mean(window)
    window_std = np.std(window)
    
    # 1. Gap ph·∫£i t·ªëi h∆°n background ƒë√°ng k·ªÉ
    darkness_ratio = (bg_mean - window_mean) / bg_mean if bg_mean > 0 else 0
    darkness_score = max(0, min(100, darkness_ratio * 300))
    
    # 2. Gap ph·∫£i c√≥ intensity ƒë·ªìng ƒë·ªÅu (std th·∫•p)
    uniformity_score = max(0, 100 - window_std * 3)
    
    # 3. Gap c√≥ h√¨nh d·∫°ng vu√¥ng/ch·ªØ nh·∫≠t
    # T√≠nh variance theo h√†ng v√† c·ªôt
    row_means = [np.mean(window[i, :]) for i in range(window_size)]
    col_means = [np.mean(window[:, j]) for j in range(window_size)]
    
    row_consistency = max(0, 100 - np.std(row_means) * 8)
    col_consistency = max(0, 100 - np.std(col_means) * 8)
    shape_score = (row_consistency + col_consistency) / 2
    
    # 4. Gap c√≥ contrast v·ªõi vi·ªÅn xung quanh
    border_pixels = np.concatenate([
        window[0, :], window[-1, :],  # Top, Bottom
        window[:, 0], window[:, -1]   # Left, Right
    ])
    border_mean = np.mean(border_pixels)
    
    center_size = max(4, window_size // 2)
    start = (window_size - center_size) // 2
    center_region = window[start:start+center_size, start:start+center_size]
    center_mean = np.mean(center_region)
    
    contrast_score = max(0, min(100, (border_mean - center_mean) / max(border_mean, 1) * 150))
    
    # 5. K√≠ch th∆∞·ªõc h·ª£p l√Ω
    size_score = 100 if 20 <= window_size <= 30 else 80 if 16 <= window_size <= 34 else 60
    
    # 6. V·ªã tr√≠ kh√¥ng ·ªü r√¨a ·∫£nh (gaps th∆∞·ªùng kh√¥ng ·ªü r√¨a)
    margin = 30
    if x < margin or x > 340-margin or y < margin or y > 251-margin:
        position_penalty = 30
    else:
        position_penalty = 0
    
    # T·ªïng h·ª£p score
    total_score = (
        darkness_score * 0.25 +      # 25% - ƒê·ªô t·ªëi
        uniformity_score * 0.20 +    # 20% - ƒê·ªìng ƒë·ªÅu
        shape_score * 0.20 +         # 20% - H√¨nh d·∫°ng vu√¥ng
        contrast_score * 0.20 +      # 20% - Contrast
        size_score * 0.15            # 15% - K√≠ch th∆∞·ªõc
    ) - position_penalty
    
    # Bonus cho gaps c√≥ ƒë·∫∑c tr∆∞ng xu·∫•t s·∫Øc
    if darkness_score > 60 and uniformity_score > 70 and contrast_score > 50:
        total_score *= 1.3
    
    return max(0, total_score)

def visualize_all_gaps(main_image_path, gaps, output_dir="results"):
    """
    Visualize t·∫•t c·∫£ gaps t√¨m th·∫•y tr√™n ·∫£nh
    """
    try:
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)
        
        img = Image.open(main_image_path).convert('RGB')
        draw = ImageDraw.Draw(img)
        
        # M√†u s·∫Øc kh√°c nhau cho t·ª´ng gap
        colors = [
            (255, 0, 0),    # ƒê·ªè
            (0, 255, 0),    # Xanh l√°  
            (0, 0, 255),    # Xanh d∆∞∆°ng
            (255, 255, 0),  # V√†ng
            (255, 0, 255),  # T√≠m
            (0, 255, 255),  # Cyan
            (255, 165, 0),  # Cam
            (128, 128, 128) # X√°m
        ]
        
        # V·∫Ω t·∫•t c·∫£ gaps
        for i, gap in enumerate(gaps[:10]):  # Top 10 gaps
            color = colors[i % len(colors)]
            x, y = gap['x'], gap['y']
            
            # V·∫Ω circle v·ªõi size t√πy theo score
            radius = max(6, min(15, int(gap['score'] / 10)))
            
            draw.ellipse([x-radius, y-radius, x+radius, y+radius], 
                        fill=color, outline=(255, 255, 255), width=2)
            
            # Th√™m label s·ªë th·ª© t·ª±
            draw.text((x+radius+2, y-radius), str(i+1), fill=color)
            
            # Th√™m info box cho top 3
            if i < 3:
                info_text = f"{i+1}. ({x},{y}) S:{gap['score']:.0f}"
                text_y = 10 + i * 20
                draw.rectangle([10, text_y, 200, text_y+18], 
                              fill=(0, 0, 0), outline=color, width=2)
                draw.text((12, text_y+2), info_text, fill=color)
        
        # T·∫°o t√™n file
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"all_gaps_{timestamp}.png"
        output_path = os.path.join(output_dir, filename)
        
        img.save(output_path, "PNG", quality=95)
        
        print(f"‚úÖ ƒê√£ l∆∞u visualization: {output_path}")
        print("üìä Gaps ƒë∆∞·ª£c ƒë√°nh d·∫•u:")
        for i, gap in enumerate(gaps[:5]):
            print(f"   {i+1}. ({gap['x']}, {gap['y']}) - Score: {gap['score']:.1f} - {colors[i % len(colors)]}")
        
        return output_path
        
    except Exception as e:
        print(f"‚ùå L·ªói khi l∆∞u visualization: {str(e)}")
        return None

# S·ª≠ d·ª•ng
if __name__ == "__main__":
    main_image = "image.png"
    
    print("üöÄ T√¨m v·ªã tr√≠ gap th·ª±c t·∫ø trong ·∫£nh...")
    
    gaps = find_real_gap_position(main_image)
    
    if gaps:
        print(f"\nüéØ T√¨m th·∫•y {len(gaps)} gaps!")
        
        # Visualize t·∫•t c·∫£ gaps
        viz_path = visualize_all_gaps(main_image, gaps)
        
        print(f"\nüìã TOP 5 GAPS T√çNH SCORE CAO NH·∫§T:")
        for i, gap in enumerate(gaps[:5]):
            print(f"  {i+1}. V·ªã tr√≠: ({gap['x']}, {gap['y']})")
            print(f"      Score: {gap['score']:.1f}")
            print(f"      Size: {gap['window_size']}x{gap['window_size']}")
            print(f"      Area: {gap['area']} pixels")
            print()
        
        print("üëÜ VUI L√íNG CHO T√îI BI·∫æT GAP N√ÄO L√Ä ƒê√öNG!")
        print("   (S·ªë th·ª© t·ª± c·ªßa gap ƒë√∫ng t·ª´ 1-5)")
        
    else:
        print("‚ùå Kh√¥ng t√¨m th·∫•y gap n√†o!")
