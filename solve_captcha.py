#!/usr/bin/env python3
"""
GI·∫¢I CAPTCHA PUZZLE - T√åM V·ªä TR√ç GH√âP M·∫¢NH
S·ª≠ d·ª•ng nh·∫≠n di·ªán h√¨nh ·∫£nh ƒë·ªÉ t√¨m v·ªã tr√≠ ƒë√∫ng c·∫ßn gh√©p m·∫£nh ph√≠a d∆∞·ªõi v√†o ph√≠a tr√™n
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime

def solve_captcha_puzzle(image_path):
    """
    Gi·∫£i captcha puzzle b·∫±ng c√°ch:
    1. T√°ch m·∫£nh gh√©p ·ªü ph√≠a d∆∞·ªõi
    2. T√¨m v·ªã tr√≠ kh·ªõp ·ªü ph√≠a tr√™n b·∫±ng template matching
    3. Tr·∫£ v·ªÅ t·ªça ƒë·ªô ch√≠nh x√°c c·∫ßn click
    """
    print("üéØ B·∫ÆT ƒê·∫¶U GI·∫¢I CAPTCHA PUZZLE...")
    
    # ƒê·ªçc ·∫£nh
    img = cv2.imread(image_path)
    if img is None:
        raise ValueError(f"Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh: {image_path}")
    
    img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    h, w = gray.shape
    
    print(f"üìê K√≠ch th∆∞·ªõc ·∫£nh: {w}x{h}")
    
    # B∆∞·ªõc 1: T√°ch m·∫£nh gh√©p ·ªü ph√≠a d∆∞·ªõi
    piece_region = extract_puzzle_piece(img_rgb, gray)
    if piece_region is None:
        print("‚ùå Kh√¥ng t√¨m th·∫•y m·∫£nh gh√©p!")
        return None
    
    piece_img, piece_mask, piece_bbox = piece_region
    print(f"üß© ƒê√£ t√°ch m·∫£nh gh√©p: {piece_bbox}")
    
    # B∆∞·ªõc 2: T√¨m v·ªã tr√≠ kh·ªõp ·ªü ph√≠a tr√™n
    gap_position = find_matching_position(img_rgb, gray, piece_img, piece_mask, piece_bbox)
    
    if gap_position is None:
        print("‚ùå Kh√¥ng t√¨m th·∫•y v·ªã tr√≠ kh·ªõp!")
        return None
    
    # B∆∞·ªõc 3: Visualize k·∫øt qu·∫£
    visualize_result(img_rgb, piece_bbox, gap_position, piece_img)
    
    print(f"‚úÖ TH√ÄNH C√îNG! V·ªã tr√≠ c·∫ßn click: {gap_position}")
    return gap_position

def extract_puzzle_piece(img_rgb, gray):
    """T√°ch m·∫£nh gh√©p t·ª´ ph√≠a d∆∞·ªõi ·∫£nh"""
    h, w = gray.shape
    
    # T√¨m v√πng m·∫£nh gh√©p ·ªü 1/4 d∆∞·ªõi c·ªßa ·∫£nh
    bottom_region = gray[int(h*0.75):, :]
    
    # T√¨m contour c·ªßa m·∫£nh gh√©p
    # Th·ª≠ nhi·ªÅu threshold ƒë·ªÉ t√¨m m·∫£nh gh√©p
    for thresh_val in [100, 80, 120, 60, 140]:
        _, binary = cv2.threshold(bottom_region, thresh_val, 255, cv2.THRESH_BINARY)
        
        # Morphology ƒë·ªÉ l√†m s·∫°ch
        kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))
        binary = cv2.morphologyEx(binary, cv2.MORPH_CLOSE, kernel)
        binary = cv2.morphologyEx(binary, cv2.MORPH_OPEN, kernel)
        
        contours, _ = cv2.findContours(binary, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        for contour in contours:
            area = cv2.contourArea(contour)
            # M·∫£nh gh√©p ph·∫£i c√≥ k√≠ch th∆∞·ªõc h·ª£p l√Ω
            if 500 < area < 5000:
                x, y, cw, ch = cv2.boundingRect(contour)
                
                # ƒêi·ªÅu ch·ªânh t·ªça ƒë·ªô v·ªÅ ·∫£nh g·ªëc
                y += int(h*0.75)
                
                # T·∫°o mask cho m·∫£nh gh√©p
                mask = np.zeros((ch, cw), dtype=np.uint8)
                contour_shifted = contour - [x, 0]  # Shift contour v·ªÅ origin
                cv2.fillPoly(mask, [contour_shifted], 255)
                
                # Extract m·∫£nh gh√©p
                piece = img_rgb[y:y+ch, x:x+cw].copy()
                
                print(f"üéØ T√¨m th·∫•y m·∫£nh gh√©p v·ªõi threshold {thresh_val}")
                print(f"üìç V·ªã tr√≠: ({x}, {y}), K√≠ch th∆∞·ªõc: {cw}x{ch}, Di·ªán t√≠ch: {area}")
                
                return piece, mask, (x, y, cw, ch)
    
    print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y m·∫£nh gh√©p ph√π h·ª£p")
    return None

def find_matching_position(img_rgb, gray, piece_img, piece_mask, piece_bbox):
    """T√¨m v·ªã tr√≠ kh·ªõp cho m·∫£nh gh√©p ·ªü ph√≠a tr√™n"""
    h, w = gray.shape
    px, py, pw, ph = piece_bbox
    
    # V√πng t√¨m ki·∫øm: ph√≠a tr√™n, tr·ª´ v√πng m·∫£nh gh√©p
    search_region = gray[:int(h*0.75), :]
    search_h, search_w = search_region.shape
    
    print(f"üîç T√¨m ki·∫øm trong v√πng: {search_w}x{search_h}")
    
    # Chu·∫©n b·ªã template t·ª´ m·∫£nh gh√©p
    piece_gray = cv2.cvtColor(piece_img, cv2.COLOR_RGB2GRAY)
    
    # Template matching v·ªõi multiple scales
    best_match = None
    best_score = 0
    best_method = None
    
    methods = [
        ('TM_CCOEFF_NORMED', cv2.TM_CCOEFF_NORMED),
        ('TM_CCORR_NORMED', cv2.TM_CCORR_NORMED),
        ('TM_SQDIFF_NORMED', cv2.TM_SQDIFF_NORMED)
    ]
    
    # Th·ª≠ c√°c scale kh√°c nhau
    scales = [1.0, 0.9, 1.1, 0.8, 1.2]
    
    for scale in scales:
        if scale != 1.0:
            new_w = int(pw * scale)
            new_h = int(ph * scale)
            template = cv2.resize(piece_gray, (new_w, new_h))
            template_mask = cv2.resize(piece_mask, (new_w, new_h))
        else:
            template = piece_gray.copy()
            template_mask = piece_mask.copy()
        
        for method_name, method in methods:
            try:
                # Template matching
                if method == cv2.TM_SQDIFF_NORMED:
                    result = cv2.matchTemplate(search_region, template, method, mask=template_mask)
                    min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)
                    match_val = 1 - min_val  # ƒê·∫£o ng∆∞·ª£c cho SQDIFF
                    match_loc = min_loc
                else:
                    result = cv2.matchTemplate(search_region, template, method, mask=template_mask)
                    min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)
                    match_val = max_val
                    match_loc = max_loc
                
                # Ki·ªÉm tra ch·∫•t l∆∞·ª£ng match
                if match_val > best_score and match_val > 0.3:  # Ng∆∞·ª°ng t·ªëi thi·ªÉu
                    # X√°c th·ª±c th√™m b·∫±ng c√°ch ki·ªÉm tra v√πng xung quanh
                    gx, gy = match_loc
                    tw, th = template.shape[::-1]
                    
                    # ƒê·∫£m b·∫£o kh√¥ng v∆∞·ª£t bi√™n
                    if gx + tw <= search_w and gy + th <= search_h:
                        # Ki·ªÉm tra v√πng gap c√≥ ph√π h·ª£p kh√¥ng
                        gap_region = search_region[gy:gy+th, gx:gx+tw]
                        gap_quality = evaluate_gap_quality(gap_region, template, template_mask)
                        
                        total_score = match_val * 0.7 + gap_quality * 0.3
                        
                        if total_score > best_score:
                            best_score = total_score
                            best_match = (gx + tw//2, gy + th//2)  # Center c·ªßa match
                            best_method = f"{method_name} (scale={scale})"
                            
                            print(f"üéØ Match t·ªët h∆°n: {best_match}, Score: {total_score:.3f}, Method: {best_method}")
            
            except Exception as e:
                continue
    
    if best_match:
        print(f"üèÜ Best match: {best_match} v·ªõi score {best_score:.3f} ({best_method})")
        return best_match
    
    return None

def evaluate_gap_quality(gap_region, template, template_mask):
    """ƒê√°nh gi√° ch·∫•t l∆∞·ª£ng v√πng gap"""
    if gap_region.shape != template.shape:
        return 0
    
    # Ch·ªâ x√©t v√πng c√≥ mask
    masked_gap = gap_region[template_mask > 0]
    masked_template = template[template_mask > 0]
    
    if len(masked_gap) == 0:
        return 0
    
    # C√°c ti√™u ch√≠ ƒë√°nh gi√°:
    # 1. ƒê·ªô t∆∞∆°ng ƒë·ªìng histogram
    gap_hist = cv2.calcHist([masked_gap], [0], None, [256], [0, 256])
    template_hist = cv2.calcHist([masked_template], [0], None, [256], [0, 256])
    hist_corr = cv2.compareHist(gap_hist, template_hist, cv2.HISTCMP_CORREL)
    
    # 2. ƒê·ªô t∆∞∆°ng ƒë·ªìng gradient
    gap_grad = cv2.Sobel(gap_region, cv2.CV_64F, 1, 1, ksize=3)
    template_grad = cv2.Sobel(template, cv2.CV_64F, 1, 1, ksize=3)
    grad_corr = np.corrcoef(gap_grad.flatten(), template_grad.flatten())[0, 1]
    grad_corr = max(0, grad_corr) if not np.isnan(grad_corr) else 0
    
    # 3. S·ª± kh√°c bi·ªát c∆∞·ªùng ƒë·ªô
    intensity_diff = np.abs(np.mean(masked_gap) - np.mean(masked_template))
    intensity_score = max(0, 1 - intensity_diff / 255)
    
    # T·ªïng h·ª£p
    quality = (hist_corr * 0.4 + grad_corr * 0.4 + intensity_score * 0.2)
    return max(0, quality)

def visualize_result(img_rgb, piece_bbox, gap_position, piece_img):
    """Hi·ªÉn th·ªã k·∫øt qu·∫£"""
    result_img = img_rgb.copy()
    px, py, pw, ph = piece_bbox
    gx, gy = gap_position
    
    # V·∫Ω bounding box cho m·∫£nh gh√©p
    cv2.rectangle(result_img, (px, py), (px + pw, py + ph), (255, 0, 0), 2)
    cv2.putText(result_img, 'PIECE', (px, py - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 0, 0), 2)
    
    # V·∫Ω v·ªã tr√≠ gap
    cv2.circle(result_img, gap_position, 10, (0, 255, 0), -1)
    cv2.circle(result_img, gap_position, 15, (0, 255, 0), 2)
    cv2.putText(result_img, f'GAP ({gx},{gy})', (gx + 20, gy - 20), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
    
    # V·∫Ω ƒë∆∞·ªùng n·ªëi
    piece_center = (px + pw//2, py + ph//2)
    cv2.arrowedLine(result_img, piece_center, gap_position, (255, 255, 0), 2)
    
    # L∆∞u k·∫øt qu·∫£
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    result_path = f"results/captcha_solved_{timestamp}.png"
    
    plt.figure(figsize=(12, 8))
    plt.imshow(result_img)
    plt.title(f'CAPTCHA SOLVED - Gap position: {gap_position}')
    plt.axis('off')
    plt.tight_layout()
    plt.savefig(result_path, dpi=150, bbox_inches='tight')
    plt.show()
    
    print(f"üíæ ƒê√£ l∆∞u k·∫øt qu·∫£: {result_path}")

def main():
    """H√†m main ƒë·ªÉ ch·∫°y ch∆∞∆°ng tr√¨nh"""
    image_path = "image.png"  # ·∫¢nh captcha
    
    try:
        gap_position = solve_captcha_puzzle(image_path)
        if gap_position:
            print(f"\nüéâ HO√ÄN TH√ÄNH!")
            print(f"üìç V·ªã tr√≠ c·∫ßn click: {gap_position}")
            print(f"üí° H∆∞·ªõng d·∫´n: Click v√†o t·ªça ƒë·ªô ({gap_position[0]}, {gap_position[1]})")
        else:
            print("\n‚ùå TH·∫§T B·∫†I - Kh√¥ng t√¨m th·∫•y v·ªã tr√≠ ph√π h·ª£p")
    
    except Exception as e:
        print(f"‚ùå L·ªñI: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
