#!/bin/bash

echo "üöÄ H∆Ø·ªöNG D·∫™N TRI·ªÇN KHAI GOOGLE CLOUD T·ª™ ƒê·∫¶U"
echo "================================================"
echo "üìÖ Ng√†y: $(date)"
echo

# B∆∞·ªõc 1: C√†i ƒë·∫∑t Google Cloud SDK
echo "üìã B∆Ø·ªöC 1: C√ÄI ƒê·∫∂T GOOGLE CLOUD SDK"
echo "====================================="
echo

if command -v gcloud &> /dev/null; then
    echo "‚úÖ Google Cloud SDK ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t"
    echo "   Version: $(gcloud --version | head -n1)"
else
    echo "‚ùå Google Cloud SDK ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t"
    echo
    echo "ƒêang c√†i ƒë·∫∑t Google Cloud SDK..."
    
    # C√†i ƒë·∫∑t cho Linux/macOS
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        echo "üêß Detected Linux - Installing..."
        
        # Download v√† c√†i ƒë·∫∑t
        curl https://sdk.cloud.google.com > install.sh
        bash install.sh --disable-prompts
        
        # Add to PATH
        echo 'export PATH="$HOME/google-cloud-sdk/bin:$PATH"' >> ~/.bashrc
        source ~/.bashrc
        
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        echo "üçé Detected macOS - Installing..."
        
        # S·ª≠ d·ª•ng Homebrew n·∫øu c√≥
        if command -v brew &> /dev/null; then
            brew install --cask google-cloud-sdk
        else
            # Manual install
            curl https://sdk.cloud.google.com > install.sh
            bash install.sh --disable-prompts
        fi
    else
        echo "üíª For Windows, please download from:"
        echo "   https://cloud.google.com/sdk/docs/install-sdk"
        exit 1
    fi
    
    echo "‚úÖ Google Cloud SDK c√†i ƒë·∫∑t ho√†n t·∫•t!"
fi

echo
echo "üìã B∆Ø·ªöC 2: ƒêƒÇNG NH·∫¨P V√Ä C·∫§U H√åNH"
echo "================================"
echo

# ƒêƒÉng nh·∫≠p
echo "üîë ƒêƒÉng nh·∫≠p v√†o Google Cloud..."
echo "   Browser s·∫Ω m·ªü ra ƒë·ªÉ b·∫°n ƒëƒÉng nh·∫≠p"
echo "   Ch·ªçn account Google c√≥ quy·ªÅn truy c·∫≠p Cloud"
echo

read -p "   Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c ƒëƒÉng nh·∫≠p..."
gcloud auth login

if [ $? -eq 0 ]; then
    echo "‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!"
else
    echo "‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i! Vui l√≤ng th·ª≠ l·∫°i"
    exit 1
fi

echo
echo "üìã B∆Ø·ªöC 3: T·∫†O HO·∫∂C CH·ªåN PROJECT"
echo "================================"
echo

# List projects
echo "üìã Danh s√°ch projects hi·ªán c√≥:"
gcloud projects list --format="table(projectId,name,projectNumber)"

echo
echo "B·∫°n c√≥ th·ªÉ:"
echo "1. S·ª≠ d·ª•ng project c√≥ s·∫µn"
echo "2. T·∫°o project m·ªõi"
echo

read -p "Ch·ªçn (1/2): " choice

if [ "$choice" = "2" ]; then
    echo
    echo "üÜï T·∫°o project m·ªõi..."
    
    read -p "Nh·∫≠p Project ID (unique, lowercase, no spaces): " PROJECT_ID
    read -p "Nh·∫≠p Project Name (display name): " PROJECT_NAME
    
    echo "ƒêang t·∫°o project..."
    gcloud projects create $PROJECT_ID --name="$PROJECT_NAME"
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Project $PROJECT_ID ƒë√£ ƒë∆∞·ª£c t·∫°o!"
    else
        echo "‚ùå Kh√¥ng th·ªÉ t·∫°o project. C√≥ th·ªÉ PROJECT_ID ƒë√£ t·ªìn t·∫°i"
        echo "Vui l√≤ng ch·ªçn PROJECT_ID kh√°c"
        exit 1
    fi
else
    echo
    read -p "Nh·∫≠p Project ID b·∫°n mu·ªën s·ª≠ d·ª•ng: " PROJECT_ID
fi

# Set project
echo
echo "üéØ C·∫•u h√¨nh project active..."
gcloud config set project $PROJECT_ID

if [ $? -eq 0 ]; then
    echo "‚úÖ Project $PROJECT_ID ƒë√£ ƒë∆∞·ª£c set l√†m default"
else
    echo "‚ùå Kh√¥ng th·ªÉ set project. Ki·ªÉm tra PROJECT_ID"
    exit 1
fi

echo
echo "üìã B∆Ø·ªöC 4: ENABLE BILLING"
echo "========================="
echo

echo "‚ö†Ô∏è  QUAN TR·ªåNG: Project c·∫ßn c√≥ billing account ƒë·ªÉ s·ª≠ d·ª•ng Cloud Run"
echo "   - Google Cloud c√≥ free tier $300 credit cho t√†i kho·∫£n m·ªõi"
echo "   - Cloud Run c√≥ 2 tri·ªáu requests mi·ªÖn ph√≠ m·ªói th√°ng"
echo "   - Chi ph√≠ th·ª±c t·∫ø r·∫•t th·∫•p cho usage th√¥ng th∆∞·ªùng"
echo

# Check billing
BILLING_ENABLED=$(gcloud billing projects describe $PROJECT_ID --format="value(billingEnabled)" 2>/dev/null)

if [ "$BILLING_ENABLED" = "True" ]; then
    echo "‚úÖ Billing ƒë√£ ƒë∆∞·ª£c enable cho project n√†y"
else
    echo "‚ùå Billing ch∆∞a ƒë∆∞·ª£c enable"
    echo
    echo "ƒê·ªÉ enable billing:"
    echo "1. Truy c·∫≠p: https://console.cloud.google.com/billing"
    echo "2. Ch·ªçn billing account ho·∫∑c t·∫°o m·ªõi"
    echo "3. Link v·ªõi project $PROJECT_ID"
    echo
    echo "Ho·∫∑c m·ªü link n√†y:"
    echo "https://console.cloud.google.com/billing/linkedaccount?project=$PROJECT_ID"
    echo
    
    read -p "Nh·∫•n Enter sau khi ƒë√£ enable billing..."
fi

echo
echo "üìã B∆Ø·ªöC 5: ENABLE APIs C·∫¶N THI·∫æT"
echo "================================"
echo

echo "üîß ƒêang enable APIs..."

# Enable required APIs
REQUIRED_APIS=(
    "cloudbuild.googleapis.com"
    "run.googleapis.com"
    "containerregistry.googleapis.com"
    "artifactregistry.googleapis.com"
)

for api in "${REQUIRED_APIS[@]}"; do
    echo "   - Enabling $api..."
    gcloud services enable $api
    
    if [ $? -eq 0 ]; then
        echo "     ‚úÖ $api enabled"
    else
        echo "     ‚ùå Failed to enable $api"
    fi
done

echo "‚úÖ T·∫•t c·∫£ APIs ƒë√£ ƒë∆∞·ª£c enabled!"

echo
echo "üìã B∆Ø·ªöC 6: C·∫§U H√åNH DOCKER"
echo "=========================="
echo

echo "üê≥ C·∫•u h√¨nh Docker authentication..."
gcloud auth configure-docker

if [ $? -eq 0 ]; then
    echo "‚úÖ Docker ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh v·ªõi Google Cloud"
else
    echo "‚ùå L·ªói c·∫•u h√¨nh Docker"
fi

echo
echo "üìã B∆Ø·ªöC 7: C·∫¨P NH·∫¨T DEPLOYMENT SCRIPTS"
echo "======================================"
echo

echo "üìù C·∫≠p nh·∫≠t PROJECT_ID trong c√°c file..."

# Update deploy.sh
if [ -f "deploy.sh" ]; then
    sed -i.bak "s/your-project-id/$PROJECT_ID/g" deploy.sh
    echo "‚úÖ Updated deploy.sh v·ªõi PROJECT_ID: $PROJECT_ID"
fi

# Update deploy-appengine.sh
if [ -f "deploy-appengine.sh" ]; then
    sed -i.bak "s/your-project-id/$PROJECT_ID/g" deploy-appengine.sh
    echo "‚úÖ Updated deploy-appengine.sh v·ªõi PROJECT_ID: $PROJECT_ID"
fi

echo
echo "üìã B∆Ø·ªöC 8: BUILD V√Ä DEPLOY"
echo "=========================="
echo

echo "üöÄ S·∫µn s√†ng deploy!"
echo
echo "Ch·ªçn ph∆∞∆°ng ph√°p deploy:"
echo "1. Google Cloud Run (Khuy·∫øn ngh·ªã - Serverless, auto-scaling)"
echo "2. Google App Engine (Platform-as-a-Service)"
echo

read -p "Ch·ªçn (1/2): " deploy_choice

if [ "$deploy_choice" = "1" ]; then
    echo
    echo "üöÄ Deploying to Cloud Run..."
    echo "Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t 5-10 ph√∫t..."
    echo
    
    # Run deploy script
    chmod +x deploy.sh
    ./deploy.sh
    
elif [ "$deploy_choice" = "2" ]; then
    echo
    echo "üöÄ Deploying to App Engine..."
    echo "Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t 5-15 ph√∫t..."
    echo
    
    # Run deploy script
    chmod +x deploy-appengine.sh
    ./deploy-appengine.sh
    
else
    echo "‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá"
    exit 1
fi

echo
echo "üéâ SETUP HO√ÄN T·∫§T!"
echo "=================="
echo

echo "üìã Th√¥ng tin project:"
echo "   - Project ID: $PROJECT_ID"
echo "   - Region: asia-southeast1"
echo

if [ "$deploy_choice" = "1" ]; then
    echo "üåê Service URL (Cloud Run):"
    SERVICE_URL=$(gcloud run services describe captcha-solver-api --platform managed --region asia-southeast1 --format 'value(status.url)' 2>/dev/null)
    if [ ! -z "$SERVICE_URL" ]; then
        echo "   $SERVICE_URL"
    else
        echo "   Ki·ªÉm tra trong Cloud Console: https://console.cloud.google.com/run"
    fi
else
    echo "üåê App URL (App Engine):"
    echo "   https://$PROJECT_ID.appspot.com"
fi

echo
echo "üìñ Test API:"
echo "   Health check:"
if [ "$deploy_choice" = "1" ]; then
    echo "   curl $SERVICE_URL/health"
else
    echo "   curl https://$PROJECT_ID.appspot.com/health"
fi

echo
echo "   Solve captcha:"
echo "   python client.py solve [API_URL] image.png"

echo
echo "üîß Useful commands:"
echo "   - View logs: gcloud logs read"
echo "   - Update service: ./deploy.sh"
echo "   - Cloud Console: https://console.cloud.google.com"

echo
echo "üí∞ Chi ph√≠:"
echo "   - Free tier: 2 tri·ªáu requests/th√°ng"
echo "   - ∆Ø·ªõc t√≠nh: $3-5/th√°ng cho usage th√¥ng th∆∞·ªùng"

echo
echo "üéâ CH√öC M·ª™NG! API C·ª¶A B·∫†N ƒê√É ONLINE!"
